@using Frontend.Components.Models
@using Frontend.Components.Pages
@using Frontend.Data
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using Newtonsoft.Json
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject HttpClient http
@inject IConfiguration config

@attribute [StreamRendering]
@rendermode InteractiveServer

@if (user == null)
{
    <p>
        loading...
    </p>
}
else
{
    <div class="account-menu">
        <div class="account-details">
            <div class="img-div">


                <EditForm enctype="multipart/form-data" method="post" Model="FileUploadForm" FormName="ProfielUpload" OnValidSubmit="HandleSubmit">
                    <InputFile id="fileUploader" OnChange="HandleSelectedFile" hidden />
                    <label for="fileUploader">
                        <i class="fa-solid fa-arrows-rotate"></i>
                    </label>
                </EditForm>


                <img src="@user.ProfileImage" alt="" />
            </div>
            <h5 class="user-name">@user.FirstName @user.LastName</h5>
            <p class="user-email">@user.Email</p>
        </div>
        <div class="account-nav">
            <NavLink href="/account/details" class="account-nav-link"><i class="fa-solid fa-gear"></i>  Account Details</NavLink>
            @* <NavLink href="/account/security" class="account-nav-link"><i class="fa-solid fa-lock"></i> Security</NavLink> *@
            <NavLink href="/account/notifications" class="account-nav-link"><i class="fa-solid fa-bell"></i> Notifications</NavLink>
            @* <NavLink href="/account/messages" class="account-nav-link"><i class="fa-solid fa-message"></i> Messages</NavLink> *@
            @* <NavLink href="/account/savedcourses" class="account-nav-link"><i class="fa-solid fa-bookmark"></i> Saved Courses</NavLink> *@
            <NavLink @onclick="HandleSignOut" class="account-nav-link"><i class="fa-solid fa-arrow-right-from-bracket"></i> Sign Out</NavLink>
        </div>
    </div>
}

@code {
    [Parameter]
    public ApplicationUser user { get; set; } = null!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private FileUploadModel FileUploadForm { get; set; } = new();


    private IBrowserFile? SelectedFile { get; set; }
    public string? ImgUrl { get; set; }


    private void HandleSignOut()
    {
        NavigationManager.NavigateTo("/signout");
    }

    public async Task HandleSubmit()
    {
        var content = new MultipartFormDataContent();
        var fileContent = new StreamContent(SelectedFile!.OpenReadStream(SelectedFile.Size));

        fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(SelectedFile.ContentType);
        content.Add(fileContent, "file", SelectedFile.Name);

        var response = await http.PostAsync(config["Api_FileProvider_Create"], content);
        var unpacked = await response.Content.ReadAsStringAsync();
        var jsonUnpacked = JsonConvert.DeserializeObject<FileUploadResponseModel>(unpacked);

        ImgUrl = jsonUnpacked.FilePath;
        user.ProfileImage = ImgUrl;

        await http.PostAsJsonAsync(config["Api_AccountProvider_Update"], user);
    }

    public async Task HandleSelectedFile(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;

        FileUploadForm.File = SelectedFile;

        await HandleSubmit();
    }

    public class FileUploadModel
    {
        [Required]
        public IBrowserFile? File { get; set; }
    }
}